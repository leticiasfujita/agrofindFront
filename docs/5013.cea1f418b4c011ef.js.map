{"version":3,"file":"5013.cea1f418b4c011ef.js","mappings":"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","names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","injectScopingSelector","scopingSelector","_","before","_colonGroup","colon","after","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","commentOriginalSelector","scopeSelector","map","shallowPart","selectorNeedsScoping","scopeSelector2","makeScopeMatcher","test","applyStrictSelectorScope","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","selector2","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","restoreSafeSelector","replaceShadowCssHost","hostScopeId","scopeCss","scopeId","slotScopeId","commentsWithHash","match","extractCommentsWithHash","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","scopeCssText","slotted","convertColonSlotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","ref","forEach","regex","text","escapeRegExpSpecialCharacters"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = (rule) => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({ placeholder, comment });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, (rule) => {\n      if (rule.selector[0] !== \"@\") {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({ placeholder, comment }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"x_google_ignoreList":[0]}